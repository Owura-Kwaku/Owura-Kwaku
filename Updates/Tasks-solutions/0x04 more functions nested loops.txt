===================================================


MAIN.H CODE


#ifndef MAIN_H
#define MAIN_H
int _putchar(char c);
int _isupper(int c);
int _isdigit(int c);
int mul(int a, int b);
void print_numbers(void);
void print_most_numbers(void);
void more_numbers(void);
void print_line(int n);
void print_diagonal(int n);
void print_square(int size);
void print_triangle(int size);
void print_number(int n);
#endif




===================================================


_PUTCHAR CODE




#include "main.h"
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
 return (write(1, &c, 1));
}




===================================================


0-isupper.c CODE


#include "main.h"
/**
* _isupper - checks for uppercase character
* @c: Variable text
* Return: Always 0.
*/
int _isupper(int c)
{




 if (c >= 'A' && c <= 'Z')
 {
 return (1);
 }
 else
{
 return (0);
}


}




==================================================


1-isdigit.c CODE




#include "main.h"


/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: int to be checked
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
 return (c >= '0' && c <= '9');
}




===========================================


2-mul.c CODE




#include "main.h"
/**
 * mul - checks for checks for a digit (0 through 9).
 * @a: a - Variable
 * @b: b - variable
 * Return: Always 0.
 */
int mul(int a, int b)
{
 int mul;


 mul = a * b;


 return (mul);
}






================================================


3-print_numbers.c CODE




#include "main.h"


/**
 * print_numbers - checks for checks for a digit (0 through 9).
 *
 * Return: Always 0.
 */
void print_numbers(void)
{
 int c;


 for (c = 48; c < 58; c++)
 {
 _putchar(c);
 }
 _putchar('\n');
}






==============================================


4-print_most_numbers.c CODE




#include "main.h"


/**
 * print_most_numbers - checks for checks for a digit (0 through 9).
 *
 * Return: Always 0.
 */
void print_most_numbers(void)
{
 int c;


 for (c = 48; c < 58; c++)
 {
 if (c != 50)
 {
 if (c != 52)
 {
 _putchar(c);
 }
 }
 }
 _putchar('\n');
}






============================================


5-more_numbers.c CODE




#include "main.h"


/**
 * more_numbers - prints 10 times the numbers, from 0 to 14
 * followed by a new line
 */
void more_numbers(void)
{
 int i, j;


 for (i = 0; i < 10; i++)
 {
 for (j = 0; j < 15; j++)
 {
 if (j >= 10)
 _putchar(j / 10 + '0');
 _putchar(j % 10 + '0');
 }
 _putchar('\n');
 }
}








================================================
6-print_line.c CODE






#include "main.h"


/**
 * print_line - draws a straight line in the terminal
 * @n: number of times the character _ should be printed
 */
void print_line(int n)
{
 if (n <= 0)
 {
 _putchar('\n');
 } else
 {
 int i;


 for (i = 1; i <= n; i++)
 {
 _putchar('_');
 }
 _putchar('\n');
 }


}






==============================================




7-print_diagonal.c CODE






#include "main.h"


/**
 * print_diagonal - draws a diagonal line on the terminal
 * @n: number of times the character \ should be printed
 */
void print_diagonal(int n)
{
 if (n <= 0)
 {
 _putchar('\n');
 } else
 {
 int i, j;


 for (i = 0; i < n; i++)
 {
 for (j = 0; j < n; j++)
 {
 if (j == i)
 _putchar('\\');
 else if (j < i)
 _putchar(' ');
 }
 _putchar('\n');
 }
 }
}






=============================================




8-print_square.c CODE






#include "main.h"


/**
 * print_square - prints a square, followed by a new line;
 * @size: size of the square
 */
void print_square(int size)
{
 if (size <= 0)
 {
 _putchar('\n');
 } else
 {
 int i, j;


 for (i = 0; i < size; i++)
 {
 for (j = 0; j < size; j++)
 {
 _putchar('#');
 }
 _putchar('\n');
 }
 }
}






===============================================




9-fizz_buzz.c CODE






#include "main.h"
#include <stdio.h>


/**
 * main - prints the numbers from 1 to 100, followed by a new line
 * but for multiples of three prints Fizz instead of the number
 * and for the multiples of five prints Buzz
 * Return: Always 0 (Success)
 */
int main(void)
{
 int i;


 for (i = 1; i <= 100; i++)
 {
 if (i % 3 == 0 && i % 5 != 0)
 {
 printf(" Fizz");
 } else if (i % 5 == 0 && i % 3 != 0)
 {
 printf(" Buzz");
 } else if (i % 3 == 0 && i % 5 == 0)
 {
 printf(" FizzBuzz");
 } else if (i == 1)
 {
 printf("%d", i);
 } else
 {
 printf(" %d", i);
 }
 }
 printf("\n");


 return (0);
}






==============================================


10-print_triangle.c CODE




#include "main.h"


/**
 * print_triangle - prints a triangle, followed by a new line
 * @size: size of the triangle
 */
void print_triangle(int size)
{
 if (size <= 0)
 {
 _putchar('\n');
 } else
 {
 int i, j;


 for (i = 1; i <= size; i++)
 {
 for (j = i; j < size; j++)
 {
 _putchar(' ');
 }


 for (j = 1; j <= i; j++)
 {
 _putchar('#');
 }


 _putchar('\n');
 }
 }
}




===========================================




100-prime_factor.c CODE






#include <stdio.h>
#include <math.h>


/**
 * main - finds and prints the largest prime factor of the number 612852475143
 * followed by a new line
 * Return: Always 0 (Success)
 */
int main(void)
{
 long int n;
 long int max;
 long int i;


 n = 612852475143;
 max = -1;


 while (n % 2 == 0)
 {
 max = 2;
 n /= 2;
 }


 for (i = 3; i <= sqrt(n); i = i + 2)
 {
 while (n % i == 0)
 {
 max = i;
 n = n / i;
 }
 }


 if (n > 2)
 max = n;


 printf("%ld\n", max);


 return (0);
}


=============================================


101-print_number.c CODE






#include "main.h"


/**
 * print_number - prints an integer
 * @n: integer to be printed
 */
void print_number(int n)
{
 unsigned int n1;


 if (n < 0)
 {
 n1 = -n;
 _putchar('-');
 } else
 {
 n1 = n;
 }


 if (n1 / 10)
 {
 print_number(n1 / 10);
 }


 _putchar((n1 % 10) + '0');
}